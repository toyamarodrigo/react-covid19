{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Cards/Cards.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","App.js","index.js"],"names":["module","exports","Cards","data","TotalConfirmed","TotalDeaths","TotalRecovered","NewConfirmed","NewDeaths","NewRecovered","lastUpdate","className","styles","container","Typography","variant","subtitle","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","color","gutterBottom","start","end","duration","separator","prefix","new_infected","recovered","deaths","Date","toDateString","rootUrl","fetchData","country","a","fetchedCountry","axios","get","Countries","modifiedData","filter","Country","push","objModifiedData","reduce","current","next","Global","console","log","fetchCountries","map","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","formControl","InputLabel","htmlFor","NativeSelect","defaultValue","onChange","e","target","value","formNativeSelect","i","key","App","_isMount","state","fetchedData","setState","this","exact","path","render","source","href","Component","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.1f9159bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"subtitle\":\"Cards_subtitle__3O0KO\",\"card\":\"Cards_card__eGUfZ\",\"lastUpdate\":\"Cards_lastUpdate__32tr2\",\"infected\":\"Cards_infected__-adYp\",\"new_infected\":\"Cards_new_infected__1qUG0\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"source\":\"App_source__3y_01\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({\n  data: {\n    TotalConfirmed,\n    TotalDeaths,\n    TotalRecovered,\n    NewConfirmed,\n    NewDeaths,\n    NewRecovered,\n    lastUpdate,\n  },\n}) => {\n  if (!TotalConfirmed) {\n    return 'Loading...';\n  }\n  return (\n    <div className={styles.container}>\n      <Typography variant=\"h3\" className={styles.subtitle}>\n        COVID-19\n      </Typography>\n      <Grid container spacing={5} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={TotalConfirmed}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography variant=\"body2\">\n            Today \n              <CountUp\n                start={0}\n                end={NewConfirmed}\n                duration={2.5}\n                separator=\",\"\n                prefix=\" +\"\n                className={styles.new_infected}\n              />\n            </Typography>\n            <Typography variant=\"body2\">Active cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={TotalRecovered}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography variant=\"body2\">\n            Today\n              <CountUp\n                start={0}\n                end={NewRecovered}\n                duration={2.5}\n                separator=\",\"\n                prefix=\" +\"\n                className={styles.new_infected}\n              />\n            </Typography>\n            <Typography variant=\"body2\">Recoveries from COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={TotalDeaths}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography variant=\"body2\">\n            Today\n              <CountUp\n                start={0}\n                end={NewDeaths}\n                duration={2.5}\n                separator=\",\"\n                prefix=\" +\"\n                className={styles.new_infected}\n              />\n            </Typography>\n            <Typography variant=\"body2\">Deaths caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Typography color=\"textSecondary\" className={styles.lastUpdate}>\n            Last Update: {new Date(lastUpdate).toDateString()}\n          </Typography>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from 'axios';\n\nconst rootUrl = 'https://api.covid19api.com/summary';\n\nexport const fetchData = async (country) => {\n  try {\n    if (country) {\n      const fetchedCountry = country;\n      const {\n        data: { Countries, Date: lastUpdate },\n      } = await axios.get(rootUrl);\n\n      const modifiedData = Countries.filter((country) => {\n        return country.Country === fetchedCountry;\n      });\n\n      modifiedData.push({ lastUpdate });\n\n      const objModifiedData = modifiedData.reduce((current, next) => {\n        return { ...current, ...next };\n      }, {});\n\n      return objModifiedData;\n    } else {\n      const {\n        data: {\n          Global: {\n            NewConfirmed,\n            NewDeaths,\n            NewRecovered,\n            TotalConfirmed,\n            TotalDeaths,\n            TotalRecovered,\n          },\n          Date: lastUpdate,\n        },\n      } = await axios.get(rootUrl);\n      const modifiedData = {\n        NewConfirmed,\n        NewDeaths,\n        NewRecovered,\n        TotalConfirmed,\n        TotalDeaths,\n        TotalRecovered,\n        lastUpdate,\n      };\n      console.log('global' + modifiedData);\n      return modifiedData;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { Countries },\n    } = await axios.get(rootUrl);\n\n    return Countries.map((country) => country.Country);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl, InputLabel } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <InputLabel htmlFor=\"select\"></InputLabel>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n        className={styles.formNativeSelect}\n      >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option value={country} key={i}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport { Cards, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api/index';\n\n// TODO: Ver component willMount unMount leak de memoria\n// TODO: Agregar mas lista paises abajo (top tiers)\n// TODO: Ver si se puede pasar data como data.cosas y no como data: { Globals: { ... } y Date: { ... } }\n// ! Too many request FIX.\n\nexport default class App extends Component {\n  _isMount = false;\n  state = {\n    data: {},\n    country: '',\n  };\n\n  async componentDidMount() {\n    this._isMount = true;\n    if (this._isMount) {\n      const fetchedData = await fetchData();\n      console.log(fetchedData);\n      this.setState({ data: fetchedData });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMount = false;\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data } = this.state;\n    return (\n      <Route\n        exact\n        path=\"/\"\n        render={() => (\n          <div className={styles.container}>\n            <Cards data={data} />\n            <CountryPicker handleCountryChange={this.handleCountryChange} />\n            <div className={styles.source}>\n              Source:{' '}\n              <a href=\"https://covid19api.com/\">https://covid19api.com/</a>\n            </div>\n          </div>\n        )}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}